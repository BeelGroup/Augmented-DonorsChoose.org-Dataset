log_level: 10
meta_items_filepath: data/items.csv
donations_filepath: data/donorschoose.org/Donations.csv
projects_filepath: data/donorschoose.org/Projects.csv
donors_filepath: data/donorschoose.org/Donors.csv
schools_filepath: data/donorschoose.org/Schools.csv
output_filepath: data/meta-learner-items.csv
random_state_seed: 2718281828
# Base of the power for the sample_weight; a value of 1 disables any scaling
class_penalty_base: 1
algorithms_name:
    - SKLearn-SVD
    - SKLearn-KNN
    - SKLearn-NMF
    - Tfidf
    - FastText
algorithms_accuracy_name: ['RecallAtPosition']
n_splits: 1
train_size: 0.8
meta_algorithms_args:
    # Parameterized meta-learners specifying the name of a `model`,
    # the model's `options` as dictionary, the selection `methods` for
    # the algorithms in the learning subsystem and whether `stacking` is desired.
    #
    # model: name of the `model`;
    #   must be one of {'SKLearn-AdaBoostClassifier', 'SKLearn-BaggingClassifier',
    #   'SKLearn-ExtraTreesClassifier', 'SKLearn-GradientBoostingClassifier',
    #   'SKLearn-RandomForestClassifier', 'SKLearn-DecisionTreeClassifier',
    #   'SKLearn-ExtraTreeClassifier', 'SKLearn-AdaBoostRegressor',
    #   'SKLearn-BaggingRegressor', 'SKLearn-ExtraTreesRegressor'
    #   'SKLearn-GradientBoostingRegressor', 'SKLearn-RandomForestRegressor',
    #   'SKLearn-DecisionTreeRegressor', 'SKLearn-ExtraTreeRegressor',
    #   'Keras-NN', 'SKLearn-UserCluster'}
    # options: dictionary of `options`; must be specified as to initialize the algorithm
    # methods: algorithm selection `methods` are the processes by which to select
    #   the algorithm from the learning subsystem;
    #   must be a subsect of {'classification', 'accuracy prediction'}
    # stacking: toggle whether to performa a `stacking` step, meaning passing
    #   the prediction of the learning subsystem to the meta-learner;
    #   defaults to `False` if not set and can be omitted
    BaggingRg:
        model: SKLearn-BaggingRegressor
        options: {}
        methods: ['classification', 'accuracy prediction']
    GradientBoostingCl:
        model: SKLearn-GradientBoostingClassifier
        options: {}
        methods: ['classification']
    GradientBoostingRg:
        model: SKLearn-GradientBoostingRegressor
        options: {}
        methods: ['classification', 'accuracy prediction']
    GradientBoostingRgMaxDepth4:
        model: SKLearn-GradientBoostingRegressor
        options: { max_depth: 4 }
        methods: ['accuracy prediction']
    GradientBoostingRgMaxDepth5:
        model: SKLearn-GradientBoostingRegressor
        options: { max_depth: 5 }
        methods: ['accuracy prediction']
    GradientBoostingRgMaxDepth6:
        model: SKLearn-GradientBoostingRegressor
        options: { max_depth: 6 }
        methods: ['accuracy prediction']
    RandomForestCl:
        model: SKLearn-RandomForestClassifier
        options: {}
        methods: ['classification']
    StackingDecisionTree:
        model: SKLearn-DecisionTreeClassifier
        options: {}
        methods: ['classification']
        stacking: True
    BalancedDecisionTree:
        model: SKLearn-DecisionTreeClassifier
        options: { class_weight: balanced }
        methods: ['classification']
    DecisionTreeRg12:
        model: SKLearn-DecisionTreeRegressor
        options: { max_leaf_nodes: 12 }
        methods: ['classification', 'accuracy prediction']
    DecisionTreeRg20:
        model: SKLearn-DecisionTreeRegressor
        options: { max_leaf_nodes: 20 }
        methods: ['classification', 'accuracy prediction']
    DecisionTreeRg48:
        model: SKLearn-DecisionTreeRegressor
        options: { max_leaf_nodes: 48 }
        methods: ['classification', 'accuracy prediction']
    UserClusterKMeans:
        model: SKLearn-UserCluster
        options: { getattr_class_name: KMeans }
        methods: ['classification']
    ExtraTreeCl:
        model: SKLearn-ExtraTreeClassifier
        options: {}
        methods: ['classification']
