log_level: 10
donations_filepath: data/donorschoose.org/Donations.csv
projects_filepath: data/donorschoose.org/Projects.csv
donors_filepath: data/donorschoose.org/Donors.csv
output_filepath: data/items.csv
random_state_seed: 2718281828
# Constant for the top-N accuracy metrics
n_random_non_interacted_items: 100
# Apply cleaning methods and sample the data as to reduce the amount of required memory
sampling_methods:
    drop_raw_values:
        - 'DonorState != DonorState'  # Convoluted way to drop NaN values
        - 'DonorCity != DonorCity'
        - 'DonorZip != DonorZip'
        - '0. <= DonationAmount <= 2.'
    frequency_boundaries:
        # Conditions must not be met at the same time; though, the last one will always hold
        - ['DonorID', 2]
    sample: 10000
n_folds: 5
algorithms_args:
    # Parameterized learners specifying the name of a `model`,
    # the model's `options` as dictionary and the columns by which to `groupby`
    # the users before applying the algorithms.
    #
    # model: name of the `model`;
    #   must be one of {'SciPy-SVD', 'SKLearn-SVD', 'SKLearn-KNN', 'SKLearn-NMF',
    #   'SKLearn-TfidfVectorizer', 'Gensim-FastText'}
    # options: dictionary of `options`; must be specified as to initialize the algorithm
    # groupby: list of columns or string of one column by which to group-by
    #   the users prior to applying the desired algorithm;
    #   defaults to 'DonorID' if not set and can be omitted
    SciPy-SVD:
        model: SciPy-SVD
        options: { n_components: 100}
    SKLearn-SVD:
        model: SKLearn-SVD
        options: { n_components: 100 }
    SKLearn-KNN:
        model: SKLearn-KNN
        options: { n_neighbors: 40 }
    SKLearn-NMF:
        model: SKLearn-NMF
        options: { n_components: 50 }
    SPL-SVD:
        model: SPL-SVD
        options: {}
    SVDpp:
        model: SPL-SVDpp
        options: {}
    SPL-NMF:
        model: SPL-NMF
        options: {}
    KNNWithMeans:
        model: SPL-KNNWithMeans
        options: { verbose: False }
    KNNBasic:
        model: SPL-KNNBasic
        options: { verbose: False }
    KNNWithZScore:
        model: SPL-KNNWithZScore
        options: { verbose: False }
    KNNBaseline:
        model: SPL-KNNBaseline
        options: { verbose: False }
    NormalPredictor:
        model: SPL-NormalPredictor
        options: {}
    CoClustering:
        model: SPL-CoClustering
        options: {}
    SlopeOne:
        model: SPL-SlopeOne
        options: {}
    Tfidf:
        model: SKLearn-TfidfVectorizer
        options:
            analyzer: 'word'
            ngram_range: [1, 2]
            stop_words: 'english'
            lowercase: True
            max_df: 0.9
            max_features: 5000
    FastText:
        model: Gensim-FastText
        options:
            fasttext_model_file: './data/wiki.en.bin'
    GroupByDonorStateCityZipIsTeacher-SKLearn-SVD:
        model: SKLearn-SVD
        options: { n_components: 100 }
        groupby: ['DonorState', 'DonorCity', 'DonorZip', 'DonorIsTeacher']
    GroupByDonorStateCityZip-SKLearn-SVD:
        model: SKLearn-SVD
        options: { n_components: 100 }
        groupby: ['DonorState', 'DonorCity', 'DonorZip']
    GroupByDonorStateCityIsTeacherState-SKLearn-SVD:
        model: SKLearn-SVD
        options: { n_components: 100 }
        groupby: ['DonorState', 'DonorCity', 'DonorIsTeacher']
    GroupByDonorStateZipIsTeacher-SKLearn-SVD:
        model: SKLearn-SVD
        options: { n_components: 100 }
        groupby: ['DonorState', 'DonorZip', 'DonorIsTeacher']
    GroupByDonorStateIsTeacher-SKLearn-SVD:
        model: SKLearn-SVD
        options: { n_components: 100 }
        groupby: ['DonorState', 'DonorIsTeacher']
    GroupByDonorState-SKLearn-SVD:
        model: SKLearn-SVD
        options: { n_components: 100 }
        groupby: 'DonorState'
    GroupByDonorState-SKLearn-KNN:
        model: SKLearn-KNN
        options: { n_neighbors: 40 }
        groupby: 'DonorState'
accuracy_methods:
    - 'RMSE'
    - 'MAE'
    - 'RecallAtPosition'
rating_scores: [1, 2, 3, 4, 5]
# Cut only on the given quantile range to mitigate the effect of outliers and append the bottom and top to the first respectively last bin afterwards
rating_range_quantile: [0., 0.99]
